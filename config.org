* Introductory Notes
This is my Emacs configuration. Most of it is stored as Emacs Lisp
source blocks in in this Org-mode file.

This file is called "config.org" and not "init.org" because during the
loading process, it creates a correspondingly-named ".el" file, and
there already is an "init.el" here. Note also that "README.org" is a
link here.

** How to install this config
In order to install this config, simply clone this repository into
=~/.emacs.d/=:

#+BEGIN_SRC sh
  git clone https://github.com/DarwinAwardWinner/dotemacs.git ~/.emacs.d
#+END_SRC

If you have an old =.emacs= file or =.emacs.d= directory that you want
to save, move them out of the way first so that they don't interfere
with the new config.

** First run slow startup
The first time you start up Emacs after installing this configuration,
it will install Cask and Pallet, and then use those to install all the
dependencies of this config, as described below in the Bootstrappping
section. This could take quite a while. Subsequent startups will not
require this install time and should be relatively fast.

* Bootstrappping
The =init.el= file does all the bootstrapping necessary to load the
configuration in this Org-mode file. It is required as a separate
non-Org-mode file because this config does not use the version of
Org-mode included with Emacs, so the proper version of Org mode must
be installed /before/ loading this file. Otherwise, loading this file
first would auto-load the built-in version of Org-mode and prevent use
of the newly-installed version until Emacs was restarted.

This section describes what happens in the =init.el= file.
** Bootstrapping Cask & Pallet
This code ensures that Cask and Pallet are installed and properly set
up, and that all packages specified in the =Cask= file are installed and
initialized. One of those packages is org, which is naturally required
to load this file.

See the =Cask= file for the list of packages that will be
installed. This is modified by Pallet whenever ~package-install~ is
used to install a new package, and should not be edited manually.

** Load =config.org=
Finally, init.el loads this file using ~org-babel-load-file~. Because
it specifies the compile option, this may create a compile log window.
So the whole thing is wrapped in ~save-window-excursion~ to ensure
that the window configuration remains unchanged (but the compile log
buffer is left in the background so any warnings or errors can still
be investigated).

* Preliminary environment setup
This sets up a few functions and other environment items that will be
used later in the configuration, so they need to be defined/prepared
up front.

** Fixing Default Directory
  Regardless of which directory Emacs is started from, I want the
  initial non-file buffers such as =*scratch*= and =*Messages*= to
  have their ~default-directory~ set to my home directory. This code
  goes through all non-file buffers whose default directories are the
  emacs starting directory or the root directory, and changes their
  default directories to my home directory.

  This code only runs during init. If the config is reloaded later
  after init, this will not run again.

#+BEGIN_SRC emacs-lisp
  (unless after-init-time
    (let ((orig-default-directory default-directory))
      (unless (f-same? default-directory "~")
        (dolist (buf (buffer-list))
          (ignore-errors
            (with-current-buffer buf
              (when (and (null (buffer-file-name buf))
                         (not (bound-and-true-p dired-directory))
                         (or (f-same? default-directory orig-default-directory)
                             (f-root? default-directory)))
                (message "Changing default dir from %s to ~/ in %s"
                         default-directory (buffer-name buf))
                (cd "~"))))))))
#+END_SRC

** Eval after init function

#+BEGIN_SRC emacs-lisp
  (defun eval-after-init (form)
    "Like `eval', but waits until after init.

  During emacs initialization, this registers FORM to be evaluated
  in `after-init-hook'. After initialization, this is equivalent
  to `(eval FORM)'."
    (if after-init-time
        (eval form)
      (add-to-list 'after-init-hook `(lambda () ,form))))
#+END_SRC

** Macro to protect buffer modified status
This defines a macro that saves the modified status of current buffer
and restores it after evaluating body.

#+BEGIN_SRC emacs-lisp
  (defmacro preserve-buffer-modified-p (&rest body)
    "Evaluate BODY, then restore buffer modified status."
    (declare (indent 0))
    `(let ((bmp (buffer-modified-p)))
       (prog1
           (progn ,@body)
         (set-buffer-modified-p bmp))))
#+END_SRC

** Ensure persistence directory exists

#+BEGIN_SRC emacs-lisp
  (make-directory (f-join user-emacs-directory "persistence") 'recursive)
#+END_SRC

** Set PATH and MANPATH from shell
My shell configuration adds a lot of things to PATH dynamically
(pyenv, perlbrew, etc.), so rather than emulate that in Emacs, we
simply run a shell and tell it to print out the environment variables
we care about. Then we set them in Emacs. For PATH, we also set the
Elisp variable ~exec-path~, which is not auto-updated when you modify
the environment variable.

This step needs to be done early, because some later configuration
items depend on having the full PATH available.

#+BEGIN_SRC emacs-lisp
  ;; TODO: make a package out of this
  ;; Pull PATH and MANPATH from the shell
  (defun parse-envvar (var-and-value)
    (let ((match-pos (string-match-p "=" var-and-value)))
      (when match-pos
        (cons (substring var-and-value 0 match-pos)
              (substring var-and-value (1+ match-pos))))))

  (defun pull-env-vars-from-shell (vars)
    (when (stringp vars)
      (setq vars (list vars)))
    (let* ((output (shell-command-to-string "bash --login -c env"))
           (lines (split-string output nil t)))
      (loop for line in lines
            for (var . value) = (parse-envvar line)
            if (member var vars)
            do (setenv var value)
            and if (string= var "PATH") do
            (setq exec-path (split-string value path-separator t)))))

  (pull-env-vars-from-shell '("PATH" "MANPATH"))
#+END_SRC

* Package configuration
This section sets up some package-specific configuration options

#+BEGIN_SRC emacs-lisp
  (require 'use-package)
#+END_SRC

Eval the following Elisp code to re-sort the below entries (this code
line is not in a source block because it is not part of the actual
configuration and should not be executed upon init):

=CODE (mapc (apply-partially #'org-sort-entries nil) (nreverse '(?O ?a))) CODE=

** adjust-parens

#+BEGIN_SRC emacs-lisp
  (use-package adjust-parens
    :commands adjust-parens-mode
    :init (progn
            ;; This line is required to silence a compiler warning
            (declare-function adjust-parens-mode (locate-library "adjust-parens"))
            (defun turn-on-adjust-parens-mode ()
              (adjust-parens-mode 1))
            (dolist (hook '(lisp-interaction-mode-hook
                            emacs-lisp-mode-hook))
              (add-hook hook #'turn-on-adjust-parens-mode)))
    :ensure t)
#+END_SRC

** apache-mode

#+BEGIN_SRC emacs-lisp
  (use-package apache-mode
    :mode ("/apache2/.*\\.conf\\'" . apache2-mode)
    :init (progn
            (defun apache-magic-mode-detect ()
              (string-match-p "^\\s-*#.*\\bsyntax=apache\\b" (buffer-string)))
            (add-to-list 'magic-mode-alist '(apache-magic-mode-detect . apache-mode)))
    :ensure t)
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :init (global-auto-complete-mode 1)
    :ensure t)
#+END_SRC

** autopair

#+BEGIN_SRC emacs-lisp
  (use-package autopair
    :init (progn (autopair-global-mode 1)
                 (setq autopair-skip-whitespace 'chomp)
                 (setq autopair-skip-criteria 'always))
    :ensure t)
#+END_SRC

** bar-cursor

#+BEGIN_SRC emacs-lisp
  (use-package bar-cursor
    :init (bar-cursor-mode 1)
    :ensure t)
#+END_SRC

** browse-url

#+BEGIN_SRC emacs-lisp
  (use-package browse-url
    :bind ("<s-mouse-1>" . browse-url-at-mouse)
    :ensure t)
#+END_SRC

** browse-url
This binds Shift+click to open a link

#+BEGIN_SRC emacs-lisp
  (use-package browse-url
    :bind ("<s-mouse-1>" . browse-url-at-mouse))

#+END_SRC

** bs (Buffer Show)

#+BEGIN_SRC emacs-lisp
  (use-package bs
    :bind ("C-x C-b" . bs-show)
    :ensure t)
#+END_SRC

** cl-lib

#+BEGIN_SRC emacs-lisp
  (use-package cl-lib)
#+END_SRC

** cl-lib-highlight

#+BEGIN_SRC emacs-lisp
  (use-package cl-lib-highlight
    :init (progn
            (cl-lib-highlight-initialize)
            (cl-lib-highlight-warn-cl-initialize)))
#+END_SRC

** cperl-mode
Replace ~perl-mode~ with ~cperl-mode~ in ~auto-mode-alist~ and
~interpreter-mode-alist~. Also associate the ".t" extension with perl
(perl test files).

#+BEGIN_SRC emacs-lisp
  (use-package cperl-mode
    :init
    (progn
      (mapc
       (lambda (x)
         (when (eq (cdr x) 'perl-mode)
           (setcdr x 'cperl-mode)))
       auto-mode-alist)
      (mapc
       (lambda (x)
         (when (eq (cdr x) 'perl-mode)
           (setcdr x 'cperl-mode)))
       interpreter-mode-alist))
    :mode ("\\.[tT]\\'" . cperl-mode)
    :ensure t)
#+END_SRC

*** Add binding for ~cperl-perldoc~.

#+BEGIN_SRC emacs-lisp
  (keydef (cperl "C-c C-d") cperl-perldoc)
#+END_SRC

** el-get

#+BEGIN_SRC emacs-lisp
  (use-package el-get
    :config (make-directory el-get-dir 'recursive)
    :ensure t)
#+END_SRC

** ess

#+BEGIN_SRC emacs-lisp
  (use-package ess
    :config
    (progn
      (setq ess-default-style 'OWN)
      (customize-set-variable
       'ess-own-style-list
       ;; Based on (cdr (assoc 'C++ ess-style-alist))
       '((ess-indent-level . 4)
         (ess-first-continued-statement-offset . 4)
         (ess-continued-statement-offset . 0)
         (ess-brace-offset . -4)
         (ess-arg-function-offset . 0)
         (ess-arg-function-offset-new-line quote
                                           (4))
         (ess-expression-offset . 4)
         (ess-else-offset . 0)
         (ess-close-brace-offset . 0)))
      (defadvice ess-smart-S-assign (around underscore-unless-space activate)
        "Always insert underscores unless point is after a space.

  This advice is only active if `ess-smart-S-assign-key' is \"_\"."
        (if (and (looking-back "[^[:space:]]" 1)
                 (string= ess-smart-S-assign-key "_"))
            (insert ess-smart-S-assign-key)
          ad-do-it)))
    :ensure t)
#+END_SRC

** ess-site

#+BEGIN_SRC emacs-lisp
  (use-package ess-site)
#+END_SRC

** esup

#+BEGIN_SRC emacs-lisp
  (use-package esup
    :defer t
    :ensure t)
#+END_SRC

** git-gutter
Loading these packages is necessary to activate them, so they are
loaded eagerly.

#+BEGIN_SRC emacs-lisp
    (use-package git-gutter
      :ensure t)
    (use-package git-gutter-fringe
      :ensure t)
#+END_SRC

** header2
This automatically inserts a header into any new elisp file.

#+BEGIN_SRC emacs-lisp
  (use-package header2
    :init (progn
            (add-hook 'emacs-lisp-mode-hook #'auto-make-header))
    :config (progn
              (defadvice make-header (after add-lexbind-variable activate)
                "Add `lexical-binding: t' to header."
                (when (eq major-mode 'emacs-lisp-mode)
                  (save-excursion
                    (add-file-local-variable-prop-line 'lexical-binding t))))
              (defsubst header-not-part-of-emacs ()
                "Insert line declaring that this file is not part of Emacs."
                (when (eq major-mode 'emacs-lisp-mode)
                  (insert header-prefix-string "This file is NOT part of GNU Emacs.\n")))
              (defsubst header-completely-blank ()
                "Insert an empty line to file header (not even `header-prefix-string')."
                (insert "\n"))
              (setq header-copyright-notice
                    (format-time-string "Copyright (C) %Y Ryan C. Thompson\n")))
    :ensure t)
#+END_SRC

*** Prevent ~auto-make-header~ from setting the buffer modified flag
This ensures that newly-created files will not be marked as modified
even though they have had headers inserted.

#+BEGIN_SRC emacs-lisp
  (defadvice auto-make-header (around dont-set-buffer-modified activate)
    "Don't set the buffer modified flag."
    (preserve-buffer-modified-p
      ad-do-it))
#+END_SRC

*** Function to insert ~provide~ statement at end of file
This is used in ~make-header-hook~

#+BEGIN_SRC emacs-lisp
  (defun header-provide-statement ()
    "Insert `provide' statement."
    (save-excursion
      (goto-char (point-max))
      (insert
       (format "\n%s"
               (pp-to-string `(provide ',(intern (f-base (buffer-file-name)))))))))
#+END_SRC

*** Override ~header-eof~ to not insert a separator line

#+BEGIN_SRC emacs-lisp
  (defun header-eof ()
    "Insert comment indicating end of file."
    (goto-char (point-max))
    (insert "\n")
    (insert comment-start
            (concat (and (= 1 (length comment-start)) header-prefix-string)
                    (if (buffer-file-name)
                        (file-name-nondirectory (buffer-file-name))
                      (buffer-name))
                    " ends here"
                    (or (nonempty-comment-end) "\n"))))

#+END_SRC

*** Update headers on save

#+BEGIN_SRC emacs-lisp
  (add-hook 'write-file-hooks #'auto-update-file-header)
#+END_SRC

** highlight-defined

#+BEGIN_SRC emacs-lisp
  (use-package highlight-defined
      :init (progn
              (defun turn-on-highlight-defined-mode ()
                (highlight-defined-mode 1))
              (add-hook 'emacs-lisp-mode-hook 'turn-on-highlight-defined-mode)
              (add-hook 'lisp-interaction-mode-hook 'turn-on-highlight-defined-mode)
              (eval-after-load 'ielm
                (add-hook 'inferior-emacs-lisp-mode-hook 'turn-on-highlight-defined-mode)))
      :ensure t)
#+END_SRC

** lexbind-mode

#+BEGIN_SRC emacs-lisp
  (use-package lexbind-mode
    :init (add-hook 'emacs-lisp-mode-hook (apply-partially #'lexbind-mode 1))
    :ensure t)
#+END_SRC

** magit
This section contains settings related to magit.

*** Disable magit highlight
I find magit item highlighting distracting
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind (("C-c g" . magit-status))
    :init
    (progn
      ;; This needs to be set or else magit will warn about things.
      (setq magit-last-seen-setup-instructions "1.4.0"))
    :config
    (progn
      (defun disable-magit-highlight-in-buffer ()
        (face-remap-add-relative 'magit-item-highlight '()))
      (add-hook 'magit-status-mode-hook 'disable-magit-highlight-in-buffer))
    :ensure t)
#+END_SRC

*** Magit myinit
This code makes magit call ~git myinit~ instead of ~git init~ when the
former is available.

See https://github.com/DarwinAwardWinner/git-custom-commands/blob/master/bin/git-myinit

#+BEGIN_SRC emacs-lisp
  (defadvice magit-run-git (before use-myinit activate)
    "use git-myinit instead of git-init"
    (when (and (equal (car args) "init")
               (tramp-sh-handle-executable-find "git-myinit"))
      (setcar args "myinit")
      (message "Modified command: %S" args)))
#+END_SRC

*** Magit init create directory
I want ~magit-init~ to create a direcotry if it doesn't exist.

#+BEGIN_SRC emacs-lisp
  (defadvice magit-init (before create-nonexistent-directory activate)
    "If DIRECTORY does not exist, create it.

  This will not create the directory recursively, so the parent
  directory must exist.

  This also modifies the interactive form to handle the case where
  the dir doesn't already exist."
    (interactive
     (let* ((dir (file-name-as-directory
                  (expand-file-name
                   (read-directory-name "Create repository in: "))))
            ;; Can't call `magit-get-top-dir' on nonexistent directory,
            ;; so use parent if necessary.
            (dir-or-existing-parent
             (if (or (file-exists-p dir)
                     (file-symlink-p dir))
                 dir
               (f-parent dir)))
            (top (magit-get-top-dir dir-or-existing-parent)))
       (if (and top
                (not (yes-or-no-p
                      (if (string-equal top dir)
                          (format "Reinitialize existing repository %s? " dir)
                        (format "%s is a repository.  Create another in %s? "
                                top dir)))))
           (user-error "Abort")
         (list dir))))
    ;; This is that part that's actually executed with the function
    ;; itself.
    (unless (or (file-exists-p directory)
                (file-symlink-p directory))
      (make-directory directory)))
#+END_SRC

*** Magit init show status when interactive
When ~magit-init~ is running interactively, it should show the status
buffer after initialization.

#+BEGIN_SRC emacs-lisp
  (defadvice magit-init (after show-status activate)
    "Show the status buffer after initialization if interactive."
    (when (called-interactively-p 'interactive)
      (magit-status directory)))
#+END_SRC

*** Use hub instead of git sometimes
It's nice to have the features of GitHub's ~hub~ command sometimes,
but magit makes a lot of calls to git, so wrapping it with hub all the
time adds significant overhead. So we use advice to tell just
~magit-git-command~ to use hub if it is available.

First let's figure out if hub is available.

#+BEGIN_SRC emacs-lisp
  (defvar magit-hub-executable (when (executable-find "hub") "hub"))
#+END_SRC

Now we override ~magit-git-command~ to use hub unconditionally. This
is the command for manually running a git command, so there's no worry
about overhead from multiple calls to git. This allows things like
~M-x magit-git-command browse~ to open the GitHub page for a repo.

#+BEGIN_SRC emacs-lisp
  (defadvice magit-git-command (around use-hub activate)
    "Use `hub' instead of `git' if available."
    (let ((magit-git-executable
           (or magit-hub-executable magit-git-executable)))
      ad-do-it))
#+END_SRC

** markdown-mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode ("\\.\\(md\\|mkdn\\)$" . markdown-mode)
    :ensure t)
#+END_SRC

** noflet

#+BEGIN_SRC emacs-lisp
  (use-package noflet
    :ensure t)
#+END_SRC

** occur-context-resize

#+BEGIN_SRC emacs-lisp
  (use-package occur-context-resize
    :init (add-hook 'occur-mode-hook 'occur-context-resize-mode))
#+END_SRC

** org-mode

** osx-pseudo-daemon

#+BEGIN_SRC emacs-lisp
  (use-package osx-pseudo-daemon
    :ensure t)
#+END_SRC

** pretty-symbols

#+BEGIN_SRC emacs-lisp
  (use-package pretty-symbols
    :config
    (progn
      (defun pretty-symbols-enable-if-available ()
        "Enable pretty-symbols in buffer if applicable.

  If current buffer's `major-mode' has any pretty symbol
     substitution rules associated with it, then enable
     `pretty-symbols-mode', otherwise do nothing."
        (when (apply #'derived-mode-p
                    (delete-dups
                     (cl-mapcan (lambda (x) (cl-copy-list (nth 3 x)))
                                pretty-symbol-patterns)))
         (pretty-symbols-mode 1)))
      (add-hook 'after-change-major-mode-hook #'pretty-symbols-enable-if-available))
    :ensure t)
#+END_SRC

** smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)
           ("C-c C-c M-x" . execute-extended-command))
    :ensure t)
#+END_SRC

** TODO guide-key
http://melpa.milkbox.net/?utm_source=dlvr.it&utm_medium=twitter#/guide-key

*** Fix ~org-in-src-block-p~
    The default implementation of the ~org-in-src-block-p~ function is
    broken and always returns nil, so we reimplement it correctly
    here.

    #+BEGIN_SRC emacs-lisp
      (use-package org
        :config
        (defun org-in-src-block-p (&optional inside)
          "Whether point is in a code source block.
           When INSIDE is non-nil, don't consider we are within a src block
           when point is at #+BEGIN_SRC or #+END_SRC."
          (save-match-data
            (let* ((elem (org-element-at-point))
                   (elem-type (car elem))
                   (props (cadr elem))
                   (end (plist-get props :end))
                   (pb (plist-get props :post-blank))
                   (content-end
                    (save-excursion
                      (goto-char end)
                      (forward-line (- pb))
                      (point)))
                   (case-fold-search t))
              (and
               ;; Elem is a src block
               (eq elem-type 'src-block)
               ;; Make sure point is not on one of the blank lines after the
               ;; element.
               (< (point) content-end)
               ;; If INSIDE is non-nil, then must not be at block delimiter
               (not
                (and
                 inside
                 (save-excursion
                   (beginning-of-line)
                   (looking-at ".*#\\+\\(begin\\|end\\)_src"))))))))
        ;; We don't set ensure here because the org-mode package has a
        ;; different name. See the Cask file.
        :ensure nil)
    #+END_SRC

*** Function for inserting src blocks in Org Mode
    The following function inserts a new src block into an org-mode buffer.

    #+BEGIN_SRC emacs-lisp
      (defun org-insert-src-block (src-code-type)
        "Insert a `SRC-CODE-TYPE' type source code block in org-mode."
        (interactive
         (let ((src-code-types
                '("emacs-lisp" "python" "C" "sh" "java" "js" "clojure" "C++" "css"
                  "calc" "asymptote" "dot" "gnuplot" "ledger" "lilypond" "mscgen"
                  "octave" "oz" "plantuml" "R" "sass" "screen" "sql" "awk" "ditaa"
                  "haskell" "latex" "lisp" "matlab" "ocaml" "org" "perl" "ruby"
                  "scheme" "sqlite")))
           (list (ido-completing-read "Source code type: " src-code-types))))
        (progn
          (newline-and-indent)
          (insert (format "#+BEGIN_SRC %s\n" src-code-type))
          (newline-and-indent)
          (insert "#+END_SRC\n")
          (forward-line -2)
          (org-edit-src-code)))
    #+END_SRC

    The next function calls ~org-edit-src-code~ on the src block at
    point, but creates one first if necessary using
    ~org-insert-src-block~.

#+BEGIN_SRC emacs-lisp
  (defun org-insert-or-edit-src-block ()
    (interactive)
    (if (org-in-src-block-p)
         (org-edit-src-code)
      ;; We use `call-interactively' to trigger the language prompt
      (call-interactively 'org-insert-src-block)))
#+END_SRC

    Lastly we define a key binding for this function. We also define
    the same key combination, as well as the standard "C-c C-c", to
    exit the source editing buffer. This way, the same key combination
    can be used to enter and exit.

#+BEGIN_SRC emacs-lisp
  (keydef (org "C-c C-'") org-insert-or-edit-src-block)
  (keydef (org-src "C-c C-'") org-edit-src-exit)
  (keydef (org-src "C-c C-c") org-edit-src-exit)
#+END_SRC

** TODO ignoramus
https://github.com/rolandwalker/ignoramus

** TODO rainbow-delimiters
http://melpa.milkbox.net/?utm_source=dlvr.it&utm_medium=twitter#/rainbow-delimiters

* el-get package configuration
Some packages are not available through ~package-install~. These are
installed and maintained through el-get.

This code loads el-get and sets it up to load all the packages listed
below. We run the el-get setup at the end of init so that it will run
after all the below packages have been added to ~el-get-sources~.

#+BEGIN_SRC emacs-lisp
  (use-package el-get
    :ensure t)
#+END_SRC

Eval the following Elisp code to re-sort the below entries (this code
line is not in a source block because it is not part of the actual
configuration and should not be executed upon init):

=CODE (mapc (apply-partially #'org-sort-entries nil) (nreverse '(?O ?a))) CODE=

** git-wip

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'el-get-sources
   '(:name git-wip
           :type github
           :pkgname "DarwinAwardWinner/git-wip"
           :load-path "emacs"
           :features git-wip-mode))
#+END_SRC

** ido-complete-space-or-hyphen
My personal fork of ido-complete-space-or-hyphen. It converts the
package into a full-fledged minor mode.

TODO: Switch back to stock version after this is merged:
https://github.com/doitian/ido-complete-space-or-hyphen/pull/2

#+BEGIN_SRC emacs-lisp
  (add-to-list
     'el-get-sources
     '(:name ido-complete-space-or-hyphen
             :type github
             :pkgname "DarwinAwardWinner/ido-complete-space-or-hyphen"
             ;; Use load to make sure *this* version of ido is loaded.
             :features ido-complete-space-or-hyphen))
#+END_SRC

** ido-ubiquitous
This uses the bleeding-edge branch of ido-ubiquitous and its companion
package ido-completing-read+.

#+BEGIN_SRC emacs-lisp
  (add-to-list
   'el-get-sources
   '(:name ido-ubiquitous
           :type http
           :url "https://github.com/DarwinAwardWinner/ido-ubiquitous/raw/bleeding-edge/ido-ubiquitous.el"
           :features ido-ubiquitous))
  (add-to-list
   'el-get-sources
   '(:name ido-completing-read+
           :type http
           :url "https://github.com/DarwinAwardWinner/ido-ubiquitous/raw/bleeding-edge/ido-completing-read+.el"
           :features ido-completing-read+))
#+END_SRC

** tempbuf
#+BEGIN_SRC emacs-lisp
  (add-to-list
   'el-get-sources
   '(:name tempbuf
           :type emacswiki
           :lazy nil
           :features tempbuf
           :after
           (progn
             (defun mode-symbol (sym)
               "Append \"-mode\" to SYM unless it already ends in it."
               (let ((symname (symbol-name sym)))
                 (intern
                  (concat symname
                          (unless (s-suffix? "-mode" symname)
                            "-mode")))))

             (defun tempbuf-major-mode-hook ()
               "Turn on `tempbuf-mode' in current buffer if buffer's `major-mode' is in `tempbuf-temporary-major-modes'.

     Else turn off `tempbuf-mode'."
               (if (apply #'derived-mode-p tempbuf-temporary-major-modes)
                   (turn-on-tempbuf-mode)
                 (turn-off-tempbuf-mode)))

             (defun tempbuf-setup-temporary-major-modes (symbol newval)
               (set-default symbol (mapcar 'mode-symbol newval))
               ;; Set tempbuf-mode correctly in existing buffers.
               (mapc (lambda (buf)
                       (with-current-buffer buf
                         (tempbuf-major-mode-hook)))
                     (buffer-list)))

             (defcustom tempbuf-temporary-major-modes nil
               "Major modes in which `tempbuf-mode' should be activated.

     This will cause buffers of these modes to be automatically killed
     if they are inactive for a short while."
               :group 'tempbuf
               :set 'tempbuf-setup-temporary-major-modes
               :type '(repeat (symbol :tag "Mode")))

             (add-hook 'after-change-major-mode-hook 'tempbuf-major-mode-hook))))
#+END_SRC

*** Tempbuf mode in ess-help buffers
This mode requires special handling because it doesn't use
~after-change-major-mode-hook~, I think.

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'ess-custom
    '(add-hook 'ess-help-mode-hook 'tempbuf-major-mode-hook))
#+END_SRC

* el-get installation
After adding all necessary packages to ~el-get-sources~, now we can
install and initialize them.

#+BEGIN_SRC emacs-lisp
  (defun el-get-do-setup ()
    (interactive)
    (loop for src in el-get-sources
          for src-name = (el-get-source-name src)
          do (message "El-get setting up %s" src-name)
          do (with-demoted-errors (el-get 'sync src-name))))
  (el-get-do-setup)
#+END_SRC

* Set up and load a separate custom file
This is the file where everything set via =M-x customize= goes.

#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (f-exists? custom-file)
    (load custom-file))
#+END_SRC
* Tweaks
** Fixes for packages
(Currently none)

** Environment tweaks
*** Use GNU ls for ~insert-directory~ if possible
On OS X (and probably other platforms), "ls" may not refer to GNU
ls. If GNU ls is installed on these platforms, it is typically
installed under the name "gls" instead. So if "gls" is available, we
prefer to use it.

#+BEGIN_SRC emacs-lisp
  (if (executable-find "gls")
      (setq insert-directory-program "gls"))
#+END_SRC
*** Use external mailer for bug reports
   This calls ~report-emacs-bug~, then ~report-emacs-insert-to-mailer~,
   then cleans up the bug buffers.

   The backquoting interpolation is used to copy the interactive form
   from ~report-emacs-bug~.

#+BEGIN_SRC emacs-lisp
  (eval
   `(defun report-emacs-bug-via-mailer (&rest args)
      "Report a bug in GNU Emacs.

  Prompts for bug subject. Opens external mailer."
      ,(interactive-form 'report-emacs-bug)
      (save-window-excursion
        (apply 'report-emacs-bug args)
        (report-emacs-bug-insert-to-mailer)
        (mapc (lambda (buf)
                (with-current-buffer buf
                  (let ((buffer-file-name nil))
                    (kill-buffer (current-buffer)))))
              (list "*Bug Help*" (current-buffer))))))
#+END_SRC

*** Tell Emacs where to find its C source code

#+BEGIN_SRC emacs-lisp
  (setq find-function-C-source-directory "~/src/emacs-24.3/src")
#+END_SRC

** Fix OSX movement keys (unswap some Command/Option shortcuts)
I map Option -> Super and Command -> Meta in Emacs on OPX, which is
the opposite of what it is by default, because I need meta to be
directly below X. However, there is a handful of shortcuts involving
Command/Option that I don't want swapped, so I need to swap their
Super/Meta bindings to cancel out the swapping of Super and Meta
themselves.

#+BEGIN_SRC emacs-lisp
  ;; Use `eval-after-load' to ensure that this always happens after
  ;; loading custom.el, since that sets the Command/Option modifiers.
  (eval-after-init
   '(when (or (featurep 'ns)
              (eq system-type 'darwin))
      ;; Only swap bindings if keys were actually swapped
      (when (and (eq ns-command-modifier 'meta)
                 (eq ns-option-modifier 'super))
        ;; Super is the Alt/option key
        (keydef "s-<left>" left-word)
        (keydef "s-<right>" right-word)
        (keydef "s-<backspace>" backward-kill-word)
        (keydef "s-<kp-delete>" kill-word)
        (keydef "s-`" tmm-menubar)
        ;; Meta is the command key
        (keydef "M-<left>" move-beginning-of-line)
        (keydef "M-<right>" move-end-of-line)
        (keydef "M-<backspace>" nil)
        (keydef "M-<kp-delete>" nil)
        (keydef "M-`" other-frame)
        ;; Need to fix `org-meta(left|right)' as well. TODO: switch to
        ;; noflet after this is merged:
        ;; https://github.com/nicferrier/emacs-noflet/pull/17
        (defadvice org-metaleft (around osx-command activate)
          (flet ((backward-word (&rest args)))
            (defun backward-word (&rest args)
              (interactive)
              (call-interactively #'move-beginning-of-line))
            ad-do-it))
        (defadvice org-metaright (around osx-command activate)
          (flet ((forward-word (&rest args)))
            (defun forward-word (&rest args)
              (interactive)
              (call-interactively #'move-end-of-line))
            ad-do-it)))))
#+END_SRC

** Allow typing a sexp and then replacing it with its value

#+BEGIN_SRC emacs-lisp
  (defun eval-replace-preceding-sexp ()
    "Replace the preceding sexp with its value."
    (interactive)
    (let ((value (eval (preceding-sexp))))
      (kill-sexp -1)
      (insert (format "%s" value))))
  (global-set-key (kbd "C-c C-e") 'eval-replace-preceding-sexp)
#+END_SRC

** Tell ~fixup-whitespace~ not to delete indentation

#+BEGIN_SRC emacs-lisp
  (defadvice fixup-whitespace (around indent-line activate)
    "Don't delete indentation; instead do correct indentation.

  When `fixup-whitespace' is called with the point in the
  indentation region of the line (i.e. before the first
  non-whitespace character), indent the line instead of deleting
  the indentation."
    (if (<= (current-column)
           (save-excursion
             (back-to-indentation)
             (current-column)))
        (indent-for-tab-command)
      ad-do-it))
#+END_SRC

** Have ~indent-region~ indent containing defun if mark is inactive

#+BEGIN_SRC emacs-lisp
  (defadvice indent-region (around indent-defun activate)
    "Indent containing defun if mark is not active."
    (if (and transient-mark-mode
             (not mark-active))
        (save-excursion
          (mark-defun)
          (call-interactively #'indent-region))
      ad-do-it))
#+END_SRC

** Always indent after newline

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") #'newline-and-indent)
#+END_SRC

** Turn off ~electric-indent-mode~ in markdown buffers

~electric-indent-mode~ has a bad interaction with ~markdown-mode~, so
we disable it in markdown buffers only.

#+BEGIN_SRC emacs-lisp
  (add-hook 'markdown-mode-hook
            (apply-partially #'electric-indent-local-mode 0))
#+END_SRC

** Turn on eldoc mode in elisp modes

#+BEGIN_SRC emacs-lisp
  (loop for hook in
        '(lisp-interaction-mode-hook emacs-lisp-mode-hook)
        do (add-hook hook #'turn-on-eldoc-mode))
#+END_SRC

** Fix ess-roxy behavior

#+BEGIN_SRC emacs-lisp
  (eval-after-load 'ess-roxy
    '(defadvice newline-and-indent (around ess-roxy-newline activate)
       "Insert a newline in a roxygen field."
       (cond
        ;; Not in roxy entry; do nothing
        ((not (ess-roxy-entry-p))
         ad-do-it)
        ;; Point at beginning of first line of entry; do nothing
        ((= (point) (ess-roxy-beg-of-entry))
         ad-do-it)
        ;; Otherwise: skip over roxy comment string if necessary and then
        ;; newline and then inset new roxy comment string
        (t
         (let ((point-after-roxy-string
                (save-excursion (forward-line 0)
                                (move-beginning-of-line nil)
                                (point))))
           (goto-char (max (point) point-after-roxy-string)))
         ad-do-it
         (insert (concat (ess-roxy-guess-str t) " "))))))
#+END_SRC

** Tramp remote sudo
This allows TRAMP to use sudo on remote hosts.

#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (add-to-list 'tramp-default-proxies-alist
               '(nil "\\`root\\'" "/ssh:%h:"))
  (add-to-list 'tramp-default-proxies-alist
               (list (regexp-quote (system-name)) nil nil))
#+END_SRC

** Tramp connection sharing
Work around http://debbugs.gnu.org/cgi/bugreport.cgi?bug=21374 by
using a shorter ControlPath.
#+BEGIN_SRC emacs-lisp
  (setq tramp-ssh-controlmaster-options
        "-o ControlPath=~/.ssh/control/tramp-%%r@%%h:%%p -o ControlMaster=auto -o ControlPersist=no")
#+END_SRC

** Use conf-mode for .gitignore files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.gitignore\\'" . conf-mode))
#+END_SRC

** Macros for running a function without user input
This code builds up the ~without-user-input~ macro, which is like
~progn~ except that if BODY makes any attempt to read user input, all
further execution is canceled and the form returns nil (note that it
does /not/ signal an error, it simply returns).

#+BEGIN_SRC emacs-lisp
  (require 'cl-macs)

  (defmacro without-minibuffer (&rest body)
    "Like `progn', but stop and return nil if BODY tries to use the minibuffer.

  Also disable dialogs while evaluating BODY forms, since dialogs
  are just an alternative to the minibuffer."
    (declare (indent 0))
    `(catch 'tried-to-use-minibuffer
       (minibuffer-with-setup-hook
           (lambda (&rest args) (throw 'tried-to-use-minibuffer nil))
         (let ((use-dialog-box))          ; No cheating by using dialogs instead of minibuffer
           ,@body))))

  (defmacro without-functions (flist &rest body)
    "Evaluate BODY, but stop and return nil if BODY calls any of the functions named in FLIST."
    (declare (indent 1))
    (let* (;; Functions are disabled by setting their body to this
           ;; temporarily.
           (fbody
            '((&rest args) (throw 'forbidden-function nil)))
           ;; This will form the first argument to `flet'
           (function-redefinitions
            (mapcar (lambda (fname) (cons fname fbody)) flist)))
      `(catch 'forbidden-function
         (cl-flet ,function-redefinitions
           ,@body))))

  (defmacro without-user-input (&rest body)
    "Like `progn', but prevent any user interaction in BODY."
    (declare (indent 0))
    `(without-functions (read-event)
       (without-minibuffer
         ,@body)))
#+END_SRC

** Macro for suppressing messages

#+BEGIN_SRC emacs-lisp
  (defmacro without-messages (&rest body)
    "Evaluate BODY but ignore all messages.

  This temporarily binds the `message' function to `ignore' while
  executing BODY."
    (declare (indent 0))
    `(noflet ((message (&rest ignore) nil))
       ,@body))
#+END_SRC

** Emacs desktop additions
The following additions ensure that the saved desktop file is always
up-to-date.

*** Add a desktop-save function that gives up if user input is required
When running in hooks, it's not disasterous if we can't save the
desktop for some reason, and we don't want to bother the user, so we
wrap the normal saving function to force it to do nothing instead of
asking for user input.

#+BEGIN_SRC emacs-lisp
  (defun desktop-autosave-in-desktop-dir (&rest args)
    "Like `desktop-save-in-desktop-dir' but aborts if input is required.

  If `desktop-save-in-desktop-dir' tries to solicit user input,
  this aborts and returns nil instead. Also, it disables all
  messages during desktop saving. This is intended for use in place
  of `desktop-save-in-desktop-dir' in hooks where you don't want to
  bother the user if something weird happens."
    (without-user-input
      (without-messages
       (apply #'desktop-save-in-desktop-dir args))))
#+END_SRC

*** Save desktop with every autosave

#+BEGIN_SRC emacs-lisp
  (add-hook 'auto-save-hook 'desktop-autosave-in-desktop-dir)
#+END_SRC

*** Save desktop after opening or closing a file
This will ensure that all open files are saved in the desktop. An idle
timer and tripwire variable are used used to avoid saving the desktop
multiple times when multiple files are opened or closed in rapid
succession.

#+BEGIN_SRC emacs-lisp
  (defvar desktop-mode-desktop-is-stale nil
    "This is set to non-nil when a file is opened or closed.")

  (defun desktop-mode-set-stale ()
    "If current buffer has a file, set the stale desktop flag."
    (when buffer-file-name
      (setq desktop-mode-desktop-is-stale t)))
  (defun desktop-mode-set-current ()
    "Unconditionally clear the stale desktop flag."
    (setq desktop-mode-desktop-is-stale nil))
  (add-hook 'kill-buffer-hook #'desktop-mode-set-stale)
  (add-hook 'find-file-hook #'desktop-mode-set-stale)
  (add-hook 'desktop-after-read-hook #'desktop-mode-set-current)

  (defun desktop-mode-save-if-stale ()
    (when desktop-mode-desktop-is-stale
      (desktop-autosave-in-desktop-dir)
      (desktop-mode-set-current)))

  (run-with-idle-timer 0.1 t #'desktop-mode-save-if-stale)
#+END_SRC

*** Auto-steal desktop if current owner is dead
The ~desktop-owner~ function should only ever return the PID of an
Emacs process that's currently running. This advice replaces the PID
of a dead or non-Emacs process with nil, thus allowing the current
Emacs to pry the desktop file from the cold dead hands of the previous
one without asking permisssion.

#+BEGIN_SRC emacs-lisp
  (defun pid-command-line (pid)
    "Return the command line for process with the specified PID.

  If PID is not a currently running process, returns nil."
    (ignore-errors
        (car (process-lines "ps" "-p" (format "%s" pid) "-o" "args="))))

  (defadvice desktop-owner (after pry-from-cold-dead-hands activate)
    "Only return the PID of an Emacs process or nil.

  If the return value is not the PID of a currently running Emacs
  owned by the current user, it is replaced with nil on the
  assumption that the previous owner died an untimely death, so
  that the current emacs can cleanly claim its inheritence."
    (ignore-errors
      (let ((owner-cmd (pid-command-line ad-return-value)))
        (unless
            (and owner-cmd
                 (string-match-p
                  "emacs"
                  (downcase (file-name-base owner-cmd))))
          (setq ad-return-value nil)))))
#+END_SRC


** Put enabled/disabled commands in =custom.el=
By default, ~enable-command~ and ~disable-command~ append their
declarations to =user-init-file=. But I want them appended to =custom.el=
instead.

#+BEGIN_SRC emacs-lisp
  (defadvice en/disable-command (around put-in-custom-file activate)
    "Put declarations in `custom-file'."
    (let ((user-init-file custom-file))
      ad-do-it))
#+END_SRC

** Fix ~diff~ behavior when backup file is not in same directory
My settings put all backup files in one directory. So when ~diff~
prmopts for the second file, it starts in that backup directory. I
would rather have it start in the same directory as the first file.


#+BEGIN_SRC emacs-lisp
  (defadvice diff (before same-dir-for-both-files activate)
    "Only prompt with backup file in same directory.

  When called interactively, `diff' normally offers to compare
  against the latest backup file of the selected file. But this
  isn't great if that backup file is in a dedicated backup
  directory far away from the original directory. So this advice
  only allows it to offer backup files from the same directory.

  This advice doesn't actually modify the function's behavior in
  any way. It simply overrides the interactive form."
    (interactive
     (let* ((newf (if (and buffer-file-name (file-exists-p buffer-file-name))
                      (read-file-name
                       (concat "Diff new file (default "
                               (file-name-nondirectory buffer-file-name) "): ")
                       nil buffer-file-name t)
                    (read-file-name "Diff new file: " nil nil t)))
            (oldf (file-newest-backup newf)))
       (setq oldf (if (and oldf (file-exists-p oldf)
                           (f-same? (f-dirname newf) (f-dirname oldf)))
                      (read-file-name
                       (concat "Diff original file (default "
                               (file-name-nondirectory oldf) "): ")
                       (file-name-directory oldf) oldf t)
                    (read-file-name "Diff original file: "
                                    (file-name-directory newf) nil t)))
       (list oldf newf (diff-switches)))))
#+END_SRC

*** TODO Report this as a bug in Emacs
** Set up a function for reloading the init file

#+BEGIN_SRC emacs-lisp
  (defun reinit ()
    (interactive)
    (save-window-excursion
      (load user-init-file)))
#+END_SRC

** Set up a function for editing this file

#+BEGIN_SRC emacs-lisp
  (defvar emacs-config-org-file (f-join user-emacs-directory "config.org"))
  (defun edit-emacs-config ()
    (interactive)
    (find-file emacs-config-org-file))
#+END_SRC

** Fix value of ~x-colors~
For some reason the ~x-colors~ variable has started to get the wrong
value, so I've copied the code to set it correctly out of
common-win.el.

#+BEGIN_SRC emacs-lisp
  (setq x-colors
    (if (featurep 'ns) (funcall #'ns-list-colors)
      (purecopy
       '("gray100" "grey100" "gray99" "grey99" "gray98" "grey98" "gray97"
         "grey97" "gray96" "grey96" "gray95" "grey95" "gray94" "grey94"
         "gray93" "grey93" "gray92" "grey92" "gray91" "grey91" "gray90"
         "grey90" "gray89" "grey89" "gray88" "grey88" "gray87" "grey87"
         "gray86" "grey86" "gray85" "grey85" "gray84" "grey84" "gray83"
         "grey83" "gray82" "grey82" "gray81" "grey81" "gray80" "grey80"
         "gray79" "grey79" "gray78" "grey78" "gray77" "grey77" "gray76"
         "grey76" "gray75" "grey75" "gray74" "grey74" "gray73" "grey73"
         "gray72" "grey72" "gray71" "grey71" "gray70" "grey70" "gray69"
         "grey69" "gray68" "grey68" "gray67" "grey67" "gray66" "grey66"
         "gray65" "grey65" "gray64" "grey64" "gray63" "grey63" "gray62"
         "grey62" "gray61" "grey61" "gray60" "grey60" "gray59" "grey59"
         "gray58" "grey58" "gray57" "grey57" "gray56" "grey56" "gray55"
         "grey55" "gray54" "grey54" "gray53" "grey53" "gray52" "grey52"
         "gray51" "grey51" "gray50" "grey50" "gray49" "grey49" "gray48"
         "grey48" "gray47" "grey47" "gray46" "grey46" "gray45" "grey45"
         "gray44" "grey44" "gray43" "grey43" "gray42" "grey42" "gray41"
         "grey41" "gray40" "grey40" "gray39" "grey39" "gray38" "grey38"
         "gray37" "grey37" "gray36" "grey36" "gray35" "grey35" "gray34"
         "grey34" "gray33" "grey33" "gray32" "grey32" "gray31" "grey31"
         "gray30" "grey30" "gray29" "grey29" "gray28" "grey28" "gray27"
         "grey27" "gray26" "grey26" "gray25" "grey25" "gray24" "grey24"
         "gray23" "grey23" "gray22" "grey22" "gray21" "grey21" "gray20"
         "grey20" "gray19" "grey19" "gray18" "grey18" "gray17" "grey17"
         "gray16" "grey16" "gray15" "grey15" "gray14" "grey14" "gray13"
         "grey13" "gray12" "grey12" "gray11" "grey11" "gray10" "grey10"
         "gray9" "grey9" "gray8" "grey8" "gray7" "grey7" "gray6" "grey6"
         "gray5" "grey5" "gray4" "grey4" "gray3" "grey3" "gray2" "grey2"
         "gray1" "grey1" "gray0" "grey0"
         "LightPink1" "LightPink2" "LightPink3" "LightPink4"
         "pink1" "pink2" "pink3" "pink4"
         "PaleVioletRed1" "PaleVioletRed2" "PaleVioletRed3" "PaleVioletRed4"
         "LavenderBlush1" "LavenderBlush2" "LavenderBlush3" "LavenderBlush4"
         "VioletRed1" "VioletRed2" "VioletRed3" "VioletRed4"
         "HotPink1" "HotPink2" "HotPink3" "HotPink4"
         "DeepPink1" "DeepPink2" "DeepPink3" "DeepPink4"
         "maroon1" "maroon2" "maroon3" "maroon4"
         "orchid1" "orchid2" "orchid3" "orchid4"
         "plum1" "plum2" "plum3" "plum4"
         "thistle1" "thistle2" "thistle3" "thistle4"
         "MediumOrchid1" "MediumOrchid2" "MediumOrchid3" "MediumOrchid4"
         "DarkOrchid1" "DarkOrchid2" "DarkOrchid3" "DarkOrchid4"
         "purple1" "purple2" "purple3" "purple4"
         "MediumPurple1" "MediumPurple2" "MediumPurple3" "MediumPurple4"
         "SlateBlue1" "SlateBlue2" "SlateBlue3" "SlateBlue4"
         "RoyalBlue1" "RoyalBlue2" "RoyalBlue3" "RoyalBlue4"
         "LightSteelBlue1" "LightSteelBlue2" "LightSteelBlue3" "LightSteelBlue4"
         "SlateGray1" "SlateGray2" "SlateGray3" "SlateGray4"
         "DodgerBlue1" "DodgerBlue2" "DodgerBlue3" "DodgerBlue4"
         "SteelBlue1" "SteelBlue2" "SteelBlue3" "SteelBlue4"
         "SkyBlue1" "SkyBlue2" "SkyBlue3" "SkyBlue4"
         "LightSkyBlue1" "LightSkyBlue2" "LightSkyBlue3" "LightSkyBlue4"
         "LightBlue1" "LightBlue2" "LightBlue3" "LightBlue4"
         "CadetBlue1" "CadetBlue2" "CadetBlue3" "CadetBlue4"
         "azure1" "azure2" "azure3" "azure4"
         "LightCyan1" "LightCyan2" "LightCyan3" "LightCyan4"
         "PaleTurquoise1" "PaleTurquoise2" "PaleTurquoise3" "PaleTurquoise4"
         "DarkSlateGray1" "DarkSlateGray2" "DarkSlateGray3" "DarkSlateGray4"
         "aquamarine1" "aquamarine2" "aquamarine3" "aquamarine4"
         "SeaGreen1" "SeaGreen2" "SeaGreen3" "SeaGreen4"
         "honeydew1" "honeydew2" "honeydew3" "honeydew4"
         "DarkSeaGreen1" "DarkSeaGreen2" "DarkSeaGreen3" "DarkSeaGreen4"
         "PaleGreen1" "PaleGreen2" "PaleGreen3" "PaleGreen4"
         "DarkOliveGreen1" "DarkOliveGreen2" "DarkOliveGreen3" "DarkOliveGreen4"
         "OliveDrab1" "OliveDrab2" "OliveDrab3" "OliveDrab4"
         "ivory1" "ivory2" "ivory3" "ivory4"
         "LightYellow1" "LightYellow2" "LightYellow3" "LightYellow4"
         "khaki1" "khaki2" "khaki3" "khaki4"
         "LemonChiffon1" "LemonChiffon2" "LemonChiffon3" "LemonChiffon4"
         "LightGoldenrod1" "LightGoldenrod2" "LightGoldenrod3" "LightGoldenrod4"
         "cornsilk1" "cornsilk2" "cornsilk3" "cornsilk4"
         "goldenrod1" "goldenrod2" "goldenrod3" "goldenrod4"
         "DarkGoldenrod1" "DarkGoldenrod2" "DarkGoldenrod3" "DarkGoldenrod4"
         "wheat1" "wheat2" "wheat3" "wheat4"
         "NavajoWhite1" "NavajoWhite2" "NavajoWhite3" "NavajoWhite4"
         "burlywood1" "burlywood2" "burlywood3" "burlywood4"
         "AntiqueWhite1" "AntiqueWhite2" "AntiqueWhite3" "AntiqueWhite4"
         "bisque1" "bisque2" "bisque3" "bisque4"
         "tan1" "tan2" "tan3" "tan4"
         "PeachPuff1" "PeachPuff2" "PeachPuff3" "PeachPuff4"
         "seashell1" "seashell2" "seashell3" "seashell4"
         "chocolate1" "chocolate2" "chocolate3" "chocolate4"
         "sienna1" "sienna2" "sienna3" "sienna4"
         "LightSalmon1" "LightSalmon2" "LightSalmon3" "LightSalmon4"
         "salmon1" "salmon2" "salmon3" "salmon4"
         "coral1" "coral2" "coral3" "coral4"
         "tomato1" "tomato2" "tomato3" "tomato4"
         "MistyRose1" "MistyRose2" "MistyRose3" "MistyRose4"
         "snow1" "snow2" "snow3" "snow4"
         "RosyBrown1" "RosyBrown2" "RosyBrown3" "RosyBrown4"
         "IndianRed1" "IndianRed2" "IndianRed3" "IndianRed4"
         "firebrick1" "firebrick2" "firebrick3" "firebrick4"
         "brown1" "brown2" "brown3" "brown4"
         "magenta1" "magenta2" "magenta3" "magenta4"
         "blue1" "blue2" "blue3" "blue4"
         "DeepSkyBlue1" "DeepSkyBlue2" "DeepSkyBlue3" "DeepSkyBlue4"
         "turquoise1" "turquoise2" "turquoise3" "turquoise4"
         "cyan1" "cyan2" "cyan3" "cyan4"
         "SpringGreen1" "SpringGreen2" "SpringGreen3" "SpringGreen4"
         "green1" "green2" "green3" "green4"
         "chartreuse1" "chartreuse2" "chartreuse3" "chartreuse4"
         "yellow1" "yellow2" "yellow3" "yellow4"
         "gold1" "gold2" "gold3" "gold4"
         "orange1" "orange2" "orange3" "orange4"
         "DarkOrange1" "DarkOrange2" "DarkOrange3" "DarkOrange4"
         "OrangeRed1" "OrangeRed2" "OrangeRed3" "OrangeRed4"
         "red1" "red2" "red3" "red4"
         "lavender blush" "LavenderBlush" "ghost white" "GhostWhite"
         "lavender" "alice blue" "AliceBlue" "azure" "light cyan"
         "LightCyan" "mint cream" "MintCream" "honeydew" "ivory"
         "light goldenrod yellow" "LightGoldenrodYellow" "light yellow"
         "LightYellow" "beige" "floral white" "FloralWhite" "old lace"
         "OldLace" "blanched almond" "BlanchedAlmond" "moccasin"
         "papaya whip" "PapayaWhip" "bisque" "antique white"
         "AntiqueWhite" "linen" "peach puff" "PeachPuff" "seashell"
         "misty rose" "MistyRose" "snow" "light pink" "LightPink" "pink"
         "hot pink" "HotPink" "deep pink" "DeepPink" "maroon"
         "pale violet red" "PaleVioletRed" "violet red" "VioletRed"
         "medium violet red" "MediumVioletRed" "violet" "plum" "thistle"
         "orchid" "medium orchid" "MediumOrchid" "dark orchid"
         "DarkOrchid" "purple" "blue violet" "BlueViolet" "medium purple"
         "MediumPurple" "light slate blue" "LightSlateBlue"
         "medium slate blue" "MediumSlateBlue" "slate blue" "SlateBlue"
         "dark slate blue" "DarkSlateBlue" "midnight blue" "MidnightBlue"
         "navy" "navy blue" "NavyBlue" "dark blue" "DarkBlue"
         "light steel blue" "LightSteelBlue" "cornflower blue"
         "CornflowerBlue" "dodger blue" "DodgerBlue" "royal blue"
         "RoyalBlue" "light slate gray" "light slate grey"
         "LightSlateGray" "LightSlateGrey" "slate gray" "slate grey"
         "SlateGray" "SlateGrey" "dark slate gray" "dark slate grey"
         "DarkSlateGray" "DarkSlateGrey" "steel blue" "SteelBlue"
         "cadet blue" "CadetBlue" "light sky blue" "LightSkyBlue"
         "sky blue" "SkyBlue" "light blue" "LightBlue" "powder blue"
         "PowderBlue" "pale turquoise" "PaleTurquoise" "turquoise"
         "medium turquoise" "MediumTurquoise" "dark turquoise"
         "DarkTurquoise"  "dark cyan" "DarkCyan" "aquamarine"
         "medium aquamarine" "MediumAquamarine" "light sea green"
         "LightSeaGreen" "medium sea green" "MediumSeaGreen" "sea green"
         "SeaGreen" "dark sea green" "DarkSeaGreen" "pale green"
         "PaleGreen" "lime green" "LimeGreen" "dark green" "DarkGreen"
         "forest green" "ForestGreen" "light green" "LightGreen"
         "green yellow" "GreenYellow" "yellow green" "YellowGreen"
         "olive drab" "OliveDrab" "dark olive green" "DarkOliveGreen"
         "lemon chiffon" "LemonChiffon" "khaki" "dark khaki" "DarkKhaki"
         "cornsilk" "pale goldenrod" "PaleGoldenrod" "light goldenrod"
         "LightGoldenrod" "goldenrod" "dark goldenrod" "DarkGoldenrod"
         "wheat" "navajo white" "NavajoWhite" "tan" "burlywood"
         "sandy brown" "SandyBrown" "peru" "chocolate" "saddle brown"
         "SaddleBrown" "sienna" "rosy brown" "RosyBrown" "dark salmon"
         "DarkSalmon" "coral" "tomato" "light salmon" "LightSalmon"
         "salmon" "light coral" "LightCoral" "indian red" "IndianRed"
         "firebrick" "brown" "dark red" "DarkRed" "magenta"
         "dark magenta" "DarkMagenta" "dark violet" "DarkViolet"
         "medium blue" "MediumBlue" "blue" "deep sky blue" "DeepSkyBlue"
         "cyan" "medium spring green" "MediumSpringGreen" "spring green"
         "SpringGreen" "green" "lawn green" "LawnGreen" "chartreuse"
         "yellow" "gold" "orange" "dark orange" "DarkOrange" "orange red"
         "OrangeRed" "red" "white" "white smoke" "WhiteSmoke" "gainsboro"
         "light gray" "light grey" "LightGray" "LightGrey" "gray" "grey"
         "dark gray" "dark grey" "DarkGray" "DarkGrey" "dim gray"
         "dim grey" "DimGray" "DimGrey" "black"))))
#+END_SRC

** Diminish
This hides or shortens the names of minor modes in the modeline.

The below code sets up a custom variable ~diminished-minor-modes~ to
control the diminishing of modes.
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t)

  (defun diminish-undo (mode)
    "Restore mode-line display of diminished mode MODE to its minor-mode value.
  Do nothing if the arg is a minor mode that hasn't been diminished.

  Interactively, enter (with completion) the name of any diminished mode (a
  mode that was formerly a minor mode on which you invoked M-x diminish).
  To restore all diminished modes to minor status, answer `all'.
  The response to the prompt shouldn't be quoted.  However, in Lisp code,
  the arg must be quoted as a symbol, as in (diminish-undo 'all)."
    (interactive
     (if diminished-mode-alist
         (list (read (completing-read
                      "Restore what diminished mode: "
                      (cons (list "all")
                            (mapcar (lambda (x) (list (symbol-name (car x))))
                                    diminished-mode-alist))
                      nil t nil 'diminish-history-symbols)))
       (error "No minor modes are currently diminished.")))
    (if (eq mode 'all)
        (cl-loop for dmode in diminished-mode-alist
                 for mode-name = (car dmode)
                 do (diminish-undo mode-name))
      (let ((minor      (assq mode      minor-mode-alist))
            (diminished (assq mode diminished-mode-alist)))
        (or minor
            (error "%S is not currently registered as a minor mode" mode))
        (when diminished
          (setq diminished-mode-alist (remove diminished diminished-mode-alist))
          (setcdr minor (cdr diminished))))))

  (defun diminish-setup (symbol newlist)
    ;; Replace symbols with one-element lists, so that each element of
    ;; NEWLIST is a valid arglist for `diminish'.
    (setq newlist
          (mapcar (lambda (x) (if (listp x) x (list x)))
                  newlist))
    (set-default symbol newlist)
    ;; Un-diminish all modes
    (diminish-undo 'all)
    ;; Diminish each mode the new list
    (mapc (lambda (x)
            (unless (listp x)
              (setq x (list x)))
            (when (assq (car x) minor-mode-alist)
              (message "Diminishing %S" x)
              (diminish (car x) (cdr x))))
          newlist))

  (defcustom diminished-minor-modes '()
    "Minor modes to be diminished, and their diminished text, if any."
    :group 'diminish
    :type '(alist :key-type (symbol :tag "Mode")
                  :value-type (choice :tag "To What"
                                      (const :tag "Hide completely" "")
                                      (string :tag "Abbreviation")))
    :set 'diminish-setup)

  (defun diminish-init ()
    (diminish-setup 'diminished-minor-modes diminished-minor-modes))

  (eval-after-init
    '(diminish-init))
#+END_SRC

** Additional extensions for latex-mode
By default ".ltx" is assoiated with LaTeX files, but not ".latex".

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.latex\\'" . latex-mode))
#+END_SRC

** Use conf-mode for git config files

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist
               '("\\.gitconfig\\'" . conf-mode))
  (add-to-list 'auto-mode-alist
               (cons (concat (regexp-quote (f-join ".git" "config")) "\\'")
                     'conf-mode))
#+END_SRC

** Fix ~report-emacs-bug-insert-to-mailer~
For some unknown reason, on my system ~xdg-email~ does nothing (but
still exits successfully) when started through ~start-process~. So we
use ~call-process~ instead.

#+BEGIN_SRC emacs-lisp
  (defadvice report-emacs-bug-insert-to-mailer (around call-process activate)
    "Use `call-process' instead of `start-process'.

  For some reason \"xdg-email\" doesn't work from `start-process',
  so we use `call-process' instead. This is fine because both the
  OS X \"open\" and unix \"xdg-email\" commands exit
  immediately."
    (noflet ((start-process (name buffer program &rest program-args)
                            (apply #'call-process program nil buffer nil program-args)))
      ad-do-it))
#+END_SRC

** Define functions for initiating external mailer composition

*** Function to send en email to external mailer
#+BEGIN_SRC emacs-lisp
  (defun insert-to-mailer (&optional arg-ignored)
    "Send the message to your preferred mail client.

  This requires either the OS X \"open\" command, or the
  freedesktop \"xdg-email\" command to be available.

  This function accepts a prefix argument for consistency with
  `message-send', but the prefix argument has no effect."
    (interactive "P")
    (unless (derived-mode-p 'message-mode)
      (error "Current buffer is not a mail message."))
    (save-excursion
      (goto-char (point-min))
      (let* ((header (mail-header-extract-no-properties))
             (mailto-url (make-mailto-url header))
             (body (progn
                     (re-search-forward "^--text follows this line--\n")
                     (buffer-substring-no-properties (point) (point-max)))))
        (call-process "xdg-email" nil nil nil "--body" body mailto-url))))

  (defun insert-to-mailer-and-exit (&optional arg)
    "Send message like `insert-to-mailer', then, if no errors, exit from mail buffer.

  This function accepts a prefix argument for consistency with
  `message-send-and-exit', but the prefix argument has no effect."
    (interactive "P")
    (let ((buf (current-buffer))
          (actions message-exit-actions))
      (when (and (insert-to-mailer arg)
                 (buffer-name buf))
        (message-bury buf)
        (if message-kill-buffer-on-exit
            (kill-buffer buf))
        (message-do-actions actions)
        t)))
#+END_SRC

*** Define mail-user-agent for external mailer

#+BEGIN_SRC emacs-lisp
  (define-mail-user-agent 'external-mailer-user-agent
    (get 'message-user-agent 'composefunc)
    #'insert-to-mailer-and-exit
    (get 'message-user-agent 'abortfunc)
    (get 'message-user-agent 'hookvar))
#+END_SRC

** Eliminate trailing semicolon in propline variable list

Emacs functions that modify the local variables in the propline also
add an extraneous trailing semicolon. This advice deletes it.

#+BEGIN_SRC emacs-lisp
  (defadvice modify-file-local-variable-prop-line (around cleanup-semicolon activate)
    (atomic-change-group
      ad-do-it
      (save-excursion
        (goto-char (point-min))
        (let ((replace-lax-whitespace t))
          (replace-string "; -*-" " -*-" nil
                          (point) (progn (end-of-line) (point)))))))
#+END_SRC

** Alias apache2-mode to apache-mode
It looks like this mode was renamed, but my ~auto-mode-alist~ still
has references to the old name. The most expedient solution is an
obsolete alias.

#+BEGIN_SRC emacs-lisp
  (define-obsolete-variable-alias 'apache2-mode 'apache-mode)
  (define-obsolete-function-alias 'apache2-mode 'apache-mode)
#+END_SRC

** Associate .zsh files with zshell in sh-mode
Emacs sh-mode doesn't automatically associate ~*.zsh~ with zsh. This
enables that. It also enables it for a few other zsh-related files.

#+BEGIN_SRC emacs-lisp
  ;; Files ending in .zsh
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
  ;; zsh startup files
  (add-to-list 'auto-mode-alist '("\\.\\(zshrc\\|zshenv\\|zprofile\\|zlogin\\|zlogout\\)\\>" . sh-mode))
  ;; Ensure that sh-mode uses zsh as shell for these files
  (add-hook 'sh-mode-hook
            (lambda ()
              (if (string-match-p "\\.zsh\\(rc\\|env\\|\\'\\)" buffer-file-name)
                  (sh-set-shell "zsh"))))
#+END_SRC

** Add ~sort-words~ command
Emacs has a command to sort lines, but not to sort words in a region.

#+BEGIN_SRC emacs-lisp
  (defun sort-words (reverse beg end)
    "Sort words in region alphabetically, in REVERSE if negative.
  Prefixed with negative \\[universal-argument], sorts in reverse.

  The variable `sort-fold-case' determines whether alphabetic case
  affects the sort order.

  See `sort-regexp-fields'."
    (interactive "*P\nr")
    (sort-regexp-fields reverse "\\w+" "\\&" beg end))
#+END_SRC

** Only enable git-gutter in local files
Git-gutter doesn't play nice with TRAMP remotes

#+BEGIN_SRC emacs-lisp
  (defun git-gutter-find-file-hook ()
    (git-gutter-mode
     (if (file-remote-p (buffer-file-name))
         0
       1)))
  (add-hook 'find-file-hook #'git-gutter-find-file-hook)
#+END_SRC

** TODO Centered line mode

** TODO volatile highlight

** TODO reveal-in-finder

* Environment-specific settings
This section uses the macros defined in ~system-specific-settings~ to
set options that should vary depending on which system Emacs is
running on.

** Set up tool-bars
Normally we want the toolbar and menubar disabled for maximum text
space. But in OSX, disabling them causes various things to break, so
we want to enabled them there.

#+BEGIN_SRC emacs-lisp
  (let ((mode-arg (if-system-type-match 'darwin 1 -1)))
    (menu-bar-mode mode-arg)
    (scroll-bar-mode mode-arg))
#+END_SRC

** Use system trash bin

#+BEGIN_SRC emacs-lisp
  (when-system-type-match 'darwin
    (defvar trash-command "trash")

    (defun system-move-file-to-trash (filename)
      "Move file to OS X trash.

  This assumes that a program called `trash' is in your $PATH and
  that this program will, when passed a single file path as an
  argument, move that file to the trash."
      (call-process trash-command nil nil nil filename)))
#+END_SRC

** Use GNU df (gdf) on OSX if available
On OSX, the standard df command (BSD version, I think) is
insufficient, and we want GNU df instead, which is typically installed
as ~gdf~. And we may as well use gdf over df on any other system which
provides both as well. This implementation uses ~/opt/local/bin/gdf~
preferentially, since that is the version installed by Macports.

#+BEGIN_SRC emacs-lisp
  (when (executable-find "gdf")
    (setq directory-free-space-program "gdf"))
#+END_SRC

* Start emacs server
This allows ~emacsclient~ to connect. We avoid starting the server in
batch mode since there is no point in that case.

Errors are ignored in case there are two instances of Emacs running,
or in case the current Emacs is already running a server. The first
will start the server, and the second will silently fail, since a
server is already running.

#+BEGIN_SRC emacs-lisp
  (unless noninteractive
    (ignore-errors (server-start)))
#+END_SRC
